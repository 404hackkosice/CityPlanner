// <auto-generated />
using CityPlanner.Internal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityPlanner.Internal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230401202954_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BuildingInterestPoint", b =>
                {
                    b.Property<int>("NearBuildingsId")
                        .HasColumnType("int");

                    b.Property<int>("NearInterestPointsId")
                        .HasColumnType("int");

                    b.HasKey("NearBuildingsId", "NearInterestPointsId");

                    b.HasIndex("NearInterestPointsId");

                    b.ToTable("BuildingInterestPoint");
                });

            modelBuilder.Entity("CityPlanner.Entities.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("HousingCount")
                        .HasColumnType("int");

                    b.Property<string>("OrientationNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SearchableAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CityPlanner.Entities.Entities.InterestPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("X")
                        .HasColumnType("double");

                    b.Property<double>("Y")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("InterestPoints");
                });

            modelBuilder.Entity("BuildingInterestPoint", b =>
                {
                    b.HasOne("CityPlanner.Entities.Entities.Building", null)
                        .WithMany()
                        .HasForeignKey("NearBuildingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CityPlanner.Entities.Entities.InterestPoint", null)
                        .WithMany()
                        .HasForeignKey("NearInterestPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
