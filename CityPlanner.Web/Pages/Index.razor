@implements IDisposable
@page "/"
@inject DataContext _db

<PageTitle>Livity - Living that you're looking for</PageTitle>

<div class="title-box">
    <div class="title-subtext">
        Find the
    </div>
    <div class="title-text">
        PERFECT PLACE
    </div>
</div>

<div class="mt-24 flex flex-col justify-center items-center space-y-4 w-1/2 mx-auto relative">
    <h6 class="text-xl text-subText">Never been that easy</h6>
    <form @onsubmit="SubmitForm" class="flex flex-row space-x-4 p-2 bg-white w-full rounded-md items-stretch shadow-lg">
        <img src="./../icons/search.svg" alt="send icon" class="self-center">
        <input type="search" id="inputField" class="input-field" @oninput="OnSearchTextChanged" placeholder="Street, City"/>

        <button type="button" class="main-button">
            <img src="./../icons/send.svg" alt="send icon" class="self-center">
            <span class="self-center">SUBMIT</span>
        </button>
    </form>
    
    @if (_resultAddresses is not null && _resultAddresses.Any())
    {
        <div class="dropdown-box">
            @foreach(var result in _resultAddresses) 
            {
                <div class="dropdown-item">@result.Street @result.OrientationNumber, @result.District</div>
            }
        </div>
    }
</div>

<div class="flex flex-col justify-center items-center mt-14 w-1/4 mx-auto space-y-2">
    <img src="./../icons/direction-fork.svg" alt="send icon" class="w-1/6">
    <p>
        it should not take longer than 15 minutes for you to get everywhere
    </p>
    <button class="more-button">Read more</button>
</div>

<div class="flex flex-col w-1/5 mx-auto mt-12 space-y-2 items-center">
    <p>Any questions?</p>
    <button class="chat-button">
        <img src="./../icons/chat.svg" alt="chat icon" class="self-center">
        <span class="self-center">Chat with us</span>
    </button>
</div>

@if (submitted && !showResult)
{
    <div>
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-black" xmlns="http://www.w3.org/2000/svg" fill="none"
            viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
            </path>
        </svg>
        Checking for <span
            class='font-bold'>@spinnerText</span>...
    </div>
}
else if (showResult)
{
    <div>
        Results for @inputValue
    </div>
}

@code {
    private string[] spinnerTexts = {
        "hospitals", "parks", "museums", "kindergardens", "bars", "gardens", "parking spots", "public transport"
    };
    private string? spinnerText = "goverment offices";

    private string? inputValue;

    private bool showResult;
    private bool submitted;
    private System.Timers.Timer? _timer;
    private string? _searchTerm;

    private List<Building>? _resultAddresses = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        _timer = new System.Timers.Timer(500);
        _timer.Stop();
        _timer.Elapsed += Filter;
        _timer.AutoReset = false;
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value as string;

        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _resultAddresses = null;
            _timer?.Stop();
        } else {
            _timer?.Stop();
            _timer?.Start();
        }
    }

    private async Task SubmitForm()
    {
        submitted = true;

        while (submitted && !showResult)
        {
            await Task.Delay(3000);

            spinnerText = spinnerTexts[(Array.IndexOf(spinnerTexts, spinnerText) + 1) % spinnerTexts.Length];
            StateHasChanged();
        }
    }

    private async void Filter(Object? obj = null, ElapsedEventArgs? e = null)
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _resultAddresses = new();
            return;
        }

        _resultAddresses = await _db.Addresses
            .Where(x => x.SearchableAddress.Contains(_searchTerm.NormalizeForSearch()))
            .Take(10)
            .OrderBy(x => x.Street)
            .ThenBy(x => x.OrientationNumber)
            .AsNoTracking()
            .ToListAsync();

        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
        => _timer?.Dispose();
}