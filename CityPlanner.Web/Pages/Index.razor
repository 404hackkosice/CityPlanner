@implements IDisposable
@page "/"
@inject DataContext _db

<PageTitle>Livity - Living that you're looking for</PageTitle>

<div class="title-box">
    <div class="title-subtext">
        Find your
    </div>
    <div class="relative title-text w-max">
        <h1 class="animate-typing overflow-hidden whitespace-nowrap border-r-4 border-r-main pr-6">
        PERFECT PLACE
        </h1>
    </div>
</div>

<div class="mt-24 flex flex-col justify-center items-center space-y-4 w-1/2 mx-auto relative">
    <h6 class="text-xl text-subText">
        @if(submitted && !showResult) {
            <p class="animate-pulse">
                Checking for <span class='font-bold'>@spinnerText</span>...
            </p>
        }
        else {
            <p>
                Never been this easy
            </p>
        }
        
    </h6>
    <form @onsubmit="SubmitForm" class="w-10/12">
        <label for="search" class="mb-2 text-sm font-medium text-gray-900 sr-only">Search</label>
        <div class="relative">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                @if (submitted && !showResult)
                {
                    <svg class="animate-spin w-5 h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none"
                         viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                        </path>
                    </svg>
                }
                else
                {
                    <svg aria-hidden="true" class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                }

            </div>
            <input type="search" id="search" class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500" placeholder="Street, City" @oninput="OnSearchTextChanged" required disabled=@submitted value=@_searchTerm>
            <button type="submit" class="text-white absolute right-2.5 bottom-2.5 bg-blue-700 disabled:bg-blue-300 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2" disabled=@submitted>Search</button>
        </div>
    </form>
    @if (_resultAddresses is not null && _resultAddresses.Any())
    {
        <div class=" w-10/12 flex flex-col bg-slate-50 rounded-md absolute overflow-hidden shadow-lg top-[5.5rem]">
            @foreach(var result in _resultAddresses) 
            {
                <div class="dropdown-item" @onclick="() => OnOptionSelected(result)">@result.Street @result.OrientationNumber, @result.District</div>
            }
        </div>
    }
</div>

<div class="flex flex-col justify-center items-center mt-10 w-1/4 mx-auto space-y-2">
    <img src="/icons/direction-fork.svg" alt="send icon" class="w-1/6">
    <p class="text-lg text-subText text-center">
        it should not take longer than 15 minutes for you to get everywhere
    </p>
    <button class="rounded-sm bg-white text-mainDark px-6 py-1 text-sm border-4 border-transparent hover:border-b-main hover:bg-slate-50 transition-all">Read more</button>
</div>

@code {
    private string[] spinnerTexts = {
        "hospitals", "parks", "museums", "kindergardens", "gardens", "parking spots", "public transport"
    };
    private string? spinnerText = "goverment offices";

    private string? inputValue;

    private bool showResult;
    private bool submitted;
    private System.Timers.Timer? _timer;
    private string? _searchTerm;

    private Building? _selected;
    private List<Building>? _resultAddresses = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        _timer = new System.Timers.Timer(250);
        _timer.Stop();
        _timer.Elapsed += Filter;
        _timer.AutoReset = false;
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        _searchTerm = e.Value as string;

        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _resultAddresses = null;
            _timer?.Stop();
        } else {
            _timer?.Stop();
            _timer?.Start();
        }
    }

    private async void OnOptionSelected(Building building)
    {
        _selected = building;
        _searchTerm = $"{building.Street} {building.OrientationNumber}, {building.District}";
        await SubmitForm();
    }

    private async Task SubmitForm()
    {
        if (_selected is null)
        {
            if (_resultAddresses is not null && _resultAddresses.Any())
            {
                OnOptionSelected(_resultAddresses[0]);
            }
            return;
        }

        submitted = true;
        _resultAddresses = null;

        while (submitted && !showResult)
        {
            await Task.Delay(1000);
            spinnerText = spinnerTexts[(Array.IndexOf(spinnerTexts, spinnerText) + 1) % spinnerTexts.Length];
            StateHasChanged();
        }
    }

    private async void Filter(Object? obj = null, ElapsedEventArgs? e = null)
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _resultAddresses = new();
            return;
        }

        _resultAddresses = await _db.Addresses
            .Where(x => x.SearchableAddress.Contains(_searchTerm.NormalizeForSearch()))
            .Take(5)
            .OrderBy(x => x.Street)
            .ThenBy(x => x.OrientationNumber)
            .AsNoTracking()
            .ToListAsync();

        await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
        => _timer?.Dispose();
}