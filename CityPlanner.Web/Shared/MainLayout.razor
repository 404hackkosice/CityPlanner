@inject IDbContextFactory<DataContext> _dbContextFactory

<PageTitle>Livity - Living that you're looking for</PageTitle>

<CascadingValue Name="@Constants.CascadingParameters.MainLayout" Value="this">
    <div class="flex flex-col min-h-screen">
        <main class="flex-1">
            @if (_currentPage == 0)
            {
                <Index/>
            }
            else if(_currentPage == 1)
            {
                <Filters/>
            }
            else if (_currentPage == 2)
            {
                <Results ResultsDTO="_results" Building="_building"/>
            }
        </main>
        <Footer/>
    </div>
</CascadingValue>

@code {
    private int _currentPage = 0;

    private ResultsDTO? _results;
    private Building? _building;

    public async Task GoToFilters(Building building)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetBuilding = await db.Addresses
            .Include(x => x.NearInterestPoints)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(building.Id));

        if (targetBuilding is null)
            return;

        _building = targetBuilding;
        _currentPage = 1;

        StateHasChanged();
    }

    public void GoToResults(UserDTO userDto)
    {
        if (_building is null)
            return;

        _results = new ScoreService(_building, userDto).GetResults();

        _currentPage = 2;

        StateHasChanged();
    }
}