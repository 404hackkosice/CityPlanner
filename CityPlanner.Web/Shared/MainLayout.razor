@inject IDbContextFactory<DataContext> _dbContextFactory

<PageTitle>Livity - Living that you're looking for</PageTitle>

<CascadingValue Name="@Constants.CascadingParameters.MainLayout" Value="this">
    <div class="flex flex-col min-h-screen">
        <main class="flex-1">
            @if (_currentPage == 0)
            {
                <Index/>
            }

            else if (_currentPage == 1)
            {
                <Results ResultsDTO="_results"/>
            }
        </main>
        <Footer/>
    </div>
</CascadingValue>

@code {
    private int _currentPage = 0;

    private ResultsDTO? _results;

    public async void GoToResults(Building building)
    {
        using var db = _dbContextFactory.CreateDbContext();

        var targetBuilding = await db.Addresses
            .Include(x => x.NearInterestPoints)
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id.Equals(building.Id));

        if (targetBuilding is null)
            return;

        _results = new ScoreService(targetBuilding, new()
        {
           WantsBar = true,
           WantsCafe = true,
           WantsDogEnclosure = true,
           WantsFastFood = true,
           WantsGym = true,
           WantsOutsideGym = true,
           WantsPub = true,
           WantsRestaurant = true
            }).GetResults();

        _currentPage = 1;

        StateHasChanged();
    }
}